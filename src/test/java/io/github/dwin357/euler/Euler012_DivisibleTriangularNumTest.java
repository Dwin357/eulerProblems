package io.github.dwin357.euler;

import org.junit.Test;

import static org.junit.Assert.*;
/*
 * The sequence of triangle numbers is generated by adding
 * the natural numbers. So the 7th triangle number would be
 * 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would
 * be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 *
 * Let us list the factors of the first seven triangle numbers:
 *  1: 1
    3: 1,3
    6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28
 *
 * We can see that 28 is the first triangle number to have over five divisors.
 * What is the value of the first triangle number to have over five hundred divisors?
 *
 */
public class Euler012_DivisibleTriangularNumTest {

    @Test
    public void givenExample() {
        int threshHold = 5;
        int expected = 28;

        int actual = Euler012_DivisibleTriangularNum.firstTriNumWithThresholdFactors(threshHold);

        assertEquals(expected, actual);
    }

    @Test
    public void givenProblem() {
        int threshHold = 500;
        int expected = 76576500; // my ans... is wrong

        int actual = Euler012_DivisibleTriangularNum.firstTriNumWithThresholdFactors(threshHold);

        assertEquals(expected, actual);
    }
}